/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */
package edu.buffalo.cse.sql.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SEMICOLON = 6;
  /** RegularExpression Id. */
  int COMMA = 7;
  /** RegularExpression Id. */
  int CREATE_TABLE = 8;
  /** RegularExpression Id. */
  int FROM_FILE = 9;
  /** RegularExpression Id. */
  int USING_CSV = 10;
  /** RegularExpression Id. */
  int LBRAC = 11;
  /** RegularExpression Id. */
  int RBRAC = 12;
  /** RegularExpression Id. */
  int INTDT = 13;
  /** RegularExpression Id. */
  int FLOATDT = 14;
  /** RegularExpression Id. */
  int STRINGDT = 15;
  /** RegularExpression Id. */
  int SELECT = 16;
  /** RegularExpression Id. */
  int EXPONENTIAL = 17;
  /** RegularExpression Id. */
  int INTNUMBER = 18;
  /** RegularExpression Id. */
  int FLOATNUMBER = 19;
  /** RegularExpression Id. */
  int PLUS = 20;
  /** RegularExpression Id. */
  int MINUS = 21;
  /** RegularExpression Id. */
  int MULTIPLY = 22;
  /** RegularExpression Id. */
  int DIVIDE = 23;
  /** RegularExpression Id. */
  int EQUAL = 24;
  /** RegularExpression Id. */
  int NOTEQUAL = 25;
  /** RegularExpression Id. */
  int LESSTHAN = 26;
  /** RegularExpression Id. */
  int GREATERTHAN = 27;
  /** RegularExpression Id. */
  int LESSTHANEQUAL = 28;
  /** RegularExpression Id. */
  int GREATERTHANEQUAL = 29;
  /** RegularExpression Id. */
  int TRUE = 30;
  /** RegularExpression Id. */
  int FALSE = 31;
  /** RegularExpression Id. */
  int AND = 32;
  /** RegularExpression Id. */
  int OR = 33;
  /** RegularExpression Id. */
  int NOT = 34;
  /** RegularExpression Id. */
  int FROM = 35;
  /** RegularExpression Id. */
  int WHERE = 36;
  /** RegularExpression Id. */
  int GROUP_BY = 37;
  /** RegularExpression Id. */
  int AS = 38;
  /** RegularExpression Id. */
  int SUM = 39;
  /** RegularExpression Id. */
  int AVG = 40;
  /** RegularExpression Id. */
  int MAX = 41;
  /** RegularExpression Id. */
  int MIN = 42;
  /** RegularExpression Id. */
  int UNION = 43;
  /** RegularExpression Id. */
  int COUNTAGG = 44;
  /** RegularExpression Id. */
  int SINGLEQUOTE = 45;
  /** RegularExpression Id. */
  int PATH = 46;
  /** RegularExpression Id. */
  int STRING = 47;
  /** RegularExpression Id. */
  int CHARACTER = 48;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\rn\"",
    "\";\"",
    "\",\"",
    "<CREATE_TABLE>",
    "<FROM_FILE>",
    "<USING_CSV>",
    "\"(\"",
    "\")\"",
    "<INTDT>",
    "<FLOATDT>",
    "<STRINGDT>",
    "<SELECT>",
    "<EXPONENTIAL>",
    "<INTNUMBER>",
    "<FLOATNUMBER>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"=\"",
    "<NOTEQUAL>",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "<TRUE>",
    "<FALSE>",
    "<AND>",
    "<OR>",
    "<NOT>",
    "<FROM>",
    "<WHERE>",
    "<GROUP_BY>",
    "<AS>",
    "<SUM>",
    "<AVG>",
    "<MAX>",
    "<MIN>",
    "<UNION>",
    "<COUNTAGG>",
    "\"\\\'\"",
    "<PATH>",
    "<STRING>",
    "<CHARACTER>",
    "\".\"",
  };

}
