/* Generated By:JavaCC: Do not edit this line. Parser.java */
package edu.buffalo.cse.sql.parser;

import edu.buffalo.cse.sql.*;
import java.util.*;
import java.io.File;
import edu.buffalo.cse.sql.plan.*;
import edu.buffalo.cse.sql.Schema.Type;


public class Parser implements ParserConstants {
        static List<PlanNode > allRoots;
        static Map<String, Schema.TableFromFile > allTables;
        public static void main(String args []) throws ParseException
        {
        }

  static final public Map<String,Object > parseSQL() throws ParseException {
                        allRoots=new ArrayList<PlanNode >();
                        allTables=new HashMap<String, Schema.TableFromFile >();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CREATE_TABLE:
      case SELECT:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SELECT:
        select();
        break;
      case CREATE_TABLE:
        create();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
                        Map<String,Object > result=new HashMap<String,Object >();
                        result.put("Tables",allTables);
                        result.put("Roots",allRoots);
                        {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public void select() throws ParseException {
         PlanNode root;
        PlanNode lhs;
        PlanNode rhs;
        PlanNode child1=null;
        PlanNode child2=null;
        ExprTree constantExpression;
        ExprTree condition=null;
        String constColumnName=new String();
        Token constTemp;
    jj_consume_token(SELECT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRAC:
    case EXPONENTIAL:
    case INTNUMBER:
    case FLOATNUMBER:
    case TRUE:
    case FALSE:
    case NOT:
    case SINGLEQUOTE:
      constantExpression = constCondition();
                                      constColumnName="EXPR";
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AS:
        jj_consume_token(AS);
        constTemp = jj_consume_token(STRING);
                                                        constColumnName=constTemp.image;
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
                                        NullSourceNode child_1 = new NullSourceNode(1);
                                        root=new ProjectionNode();
                                        ((ProjectionNode)root).addColumn(new ProjectionNode.Column(constColumnName, constantExpression));
                                        ((ProjectionNode)root).setChild(child_1);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMMA);
        constantExpression = constCondition();
                                      constColumnName="EXPR";
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AS:
          jj_consume_token(AS);
          constTemp = jj_consume_token(STRING);
                                                        constColumnName=constTemp.image;
          break;
        default:
          jj_la1[4] = jj_gen;
          ;
        }
                                        ((ProjectionNode)root).addColumn(new ProjectionNode.Column(constColumnName, constantExpression));
      }
      break;
    case SUM:
    case AVG:
    case MAX:
    case MIN:
    case COUNTAGG:
    case STRING:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUM:
      case AVG:
      case MAX:
      case MIN:
      case COUNTAGG:
        root = aggregate();
        break;
      case STRING:
        root = columnList();
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(FROM);
      child2 = relations();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        jj_consume_token(WHERE);
        condition = whereClause();
                                        child1=new SelectionNode(condition);
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
                          if(child1==null)
                                ((PlanNode.Unary )root).setChild(child2);
                          else
                          {
                                ((PlanNode.Unary )child1).setChild(child2);
                                ((PlanNode.Unary )root).setChild(child1);
                          }
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNION:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_3;
      }
      jj_consume_token(UNION);
      jj_consume_token(SELECT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRAC:
      case EXPONENTIAL:
      case INTNUMBER:
      case FLOATNUMBER:
      case TRUE:
      case FALSE:
      case NOT:
      case SINGLEQUOTE:
        constantExpression = constCondition();
                                      constColumnName="EXPR";
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AS:
          jj_consume_token(AS);
          constTemp = jj_consume_token(STRING);
                                                        constColumnName=constTemp.image;
          break;
        default:
          jj_la1[9] = jj_gen;
          ;
        }
                                        NullSourceNode child_1 = new NullSourceNode(1);
                                        rhs=new ProjectionNode();
                                        ((ProjectionNode)rhs).addColumn(new ProjectionNode.Column(constColumnName, constantExpression));
                                        ((ProjectionNode)rhs).setChild(child_1);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[10] = jj_gen;
            break label_4;
          }
          jj_consume_token(COMMA);
          constantExpression = constCondition();
                                      constColumnName="EXPR";
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AS:
            jj_consume_token(AS);
            constTemp = jj_consume_token(STRING);
                                                        constColumnName=constTemp.image;
            break;
          default:
            jj_la1[11] = jj_gen;
            ;
          }
                                        ((ProjectionNode)rhs).addColumn(new ProjectionNode.Column(constColumnName, constantExpression));
        }
        break;
      case SUM:
      case AVG:
      case MAX:
      case MIN:
      case COUNTAGG:
      case STRING:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SUM:
        case AVG:
        case MAX:
        case MIN:
        case COUNTAGG:
          rhs = aggregate();
          break;
        case STRING:
          rhs = columnList();
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(FROM);
        child2 = relations();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHERE:
          jj_consume_token(WHERE);
          condition = whereClause();
                                        child1=new SelectionNode(condition);
          break;
        default:
          jj_la1[13] = jj_gen;
          ;
        }
                          if(child1==null)
                                ((PlanNode.Unary )rhs).setChild(child2);
                          else
                          {
                                ((PlanNode.Unary )child1).setChild(child2);
                                ((PlanNode.Unary )rhs).setChild(child1);
                          }
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          lhs=root;
          root=new UnionNode();
          ((UnionNode)root).setLHS(lhs);
          ((UnionNode)root).setRHS(rhs);
    }
    jj_consume_token(SEMICOLON);
                        allRoots.add(root);
  }

  static final public ProjectionNode columnList() throws ParseException {
          ProjectionNode columns=new ProjectionNode();
          Token col;
          String colName=null;
          Token range;
          String rangeName=null;
    col = jj_consume_token(STRING);
            colName=col.image;
            rangeName=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 49:
      jj_consume_token(49);
      col = jj_consume_token(STRING);
              rangeName=colName;
              colName=col.image;
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
            columns.addColumn(new ProjectionNode.Column(colName, new ExprTree.VarLeaf(rangeName, colName)));
            rangeName=null;
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      col = jj_consume_token(STRING);
            colName=col.image;
            rangeName=null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 49:
        jj_consume_token(49);
        col = jj_consume_token(STRING);
              rangeName=colName;
              colName=col.image;
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
            columns.addColumn(new ProjectionNode.Column(colName, new ExprTree.VarLeaf(rangeName, colName)));
            rangeName=null;
    }
                {if (true) return columns;}
    throw new Error("Missing return statement in function");
  }

  static final public ExprTree whereClause() throws ParseException {
          ExprTree rel=null;
          ExprTree loperand=null;
          ExprTree roperand=null;
          Token operator;
    rel = whereTerm();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        operator = jj_consume_token(AND);
        break;
      case OR:
        operator = jj_consume_token(OR);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      roperand = whereTerm();
                  loperand=rel;
                  if(operator.image.equalsIgnoreCase("and"))
                        rel=new ExprTree(ExprTree.OpCode.AND,loperand,roperand);
                  else
                        rel=new ExprTree(ExprTree.OpCode.OR,loperand,roperand);
    }
                {if (true) return rel;}
    throw new Error("Missing return statement in function");
  }

  static final public ExprTree whereTerm() throws ParseException {
                  Token tableName1;
                  Token colName1;
                  Token tableName2;
                  Token colName2;
                ExprTree rel=null;
                Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      tableName1 = jj_consume_token(STRING);
      jj_consume_token(49);
      colName1 = jj_consume_token(STRING);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
        t = jj_consume_token(EQUAL);
        break;
      case NOTEQUAL:
        t = jj_consume_token(NOTEQUAL);
        break;
      case LESSTHAN:
        t = jj_consume_token(LESSTHAN);
        break;
      case GREATERTHAN:
        t = jj_consume_token(GREATERTHAN);
        break;
      case LESSTHANEQUAL:
        t = jj_consume_token(LESSTHANEQUAL);
        break;
      case GREATERTHANEQUAL:
        t = jj_consume_token(GREATERTHANEQUAL);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      tableName2 = jj_consume_token(STRING);
      jj_consume_token(49);
      colName2 = jj_consume_token(STRING);
              String op=t.image;
              if(op.equals("="))
                        rel=new ExprTree(ExprTree.OpCode.EQ,new ExprTree.VarLeaf(tableName1.image, colName1.image),new ExprTree.VarLeaf(tableName2.image, colName2.image));
                  else if(op.equals("<>"))
                        rel=new ExprTree(ExprTree.OpCode.NEQ,new ExprTree.VarLeaf(tableName1.image, colName1.image),new ExprTree.VarLeaf(tableName2.image, colName2.image));
                  else if(op.equals("<"))
                        rel=new ExprTree(ExprTree.OpCode.LT,new ExprTree.VarLeaf(tableName1.image, colName1.image),new ExprTree.VarLeaf(tableName2.image, colName2.image));
                  else if(op.equals(">"))
                        rel=new ExprTree(ExprTree.OpCode.GT,new ExprTree.VarLeaf(tableName1.image, colName1.image),new ExprTree.VarLeaf(tableName2.image, colName2.image));
                  else if(op.equals("<="))
                        rel=new ExprTree(ExprTree.OpCode.LTE,new ExprTree.VarLeaf(tableName1.image, colName1.image),new ExprTree.VarLeaf(tableName2.image, colName2.image));
                  else if(op.equals(">="))
                        rel=new ExprTree(ExprTree.OpCode.GTE,new ExprTree.VarLeaf(tableName1.image, colName1.image),new ExprTree.VarLeaf(tableName2.image, colName2.image));
      break;
    case LBRAC:
      jj_consume_token(LBRAC);
      rel = whereClause();
      jj_consume_token(RBRAC);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return rel;}
    throw new Error("Missing return statement in function");
  }

  static final public PlanNode relations() throws ParseException {
                PlanNode rel=null;
                PlanNode lhs=null;
                PlanNode rhs=null;
                Token relationT;
                String relation;
    relationT = jj_consume_token(STRING);
                  relation=relationT.image;
                  Schema.TableFromFile table=allTables.get(relation);
                  rel=new ScanNode(relation, relation, table);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_7;
      }
      jj_consume_token(COMMA);
      relationT = jj_consume_token(STRING);
                        relation=relationT.image;
                        Schema.TableFromFile table2=allTables.get(relation);
                        lhs=rel;
                        rhs=new ScanNode(relation, relation, table2);
                        rel=new JoinNode();
                        ((JoinNode)rel).setLHS(lhs);
                        ((JoinNode)rel).setRHS(rhs);
    }
                  {if (true) return rel;}
    throw new Error("Missing return statement in function");
  }

  static final public AggregateNode aggregate() throws ParseException {
                AggregateNode query_0 = new AggregateNode();
                String functionType=new String();
                Token aggT;
                Token colT;
                Token operatorT;
                 String aggFun=new String();
                 String col=new String();
                 ExprTree rel=null;
                 ExprTree loperand=null;
                 ExprTree roperand=null;
                 String colName=new String();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COUNTAGG:
      jj_consume_token(COUNTAGG);
                        colName="Count";
               query_0 = new AggregateNode();
                query_0.addAggregate(new AggregateNode.AggColumn(colName, new ExprTree.ConstLeaf(1),AggregateNode.AType.COUNT));
      break;
    case SUM:
    case AVG:
    case MAX:
    case MIN:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUM:
        aggT = jj_consume_token(SUM);
        break;
      case AVG:
        aggT = jj_consume_token(AVG);
        break;
      case MIN:
        aggT = jj_consume_token(MIN);
        break;
      case MAX:
        aggT = jj_consume_token(MAX);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
              aggFun=aggT.image;
              if(aggFun.equalsIgnoreCase("sum"))
                colName="Sum";
              else if(aggFun.equalsIgnoreCase("avg"))
                colName="Average";
              else if(aggFun.equalsIgnoreCase("min"))
                colName="Min";
              else
                colName="Max";
      jj_consume_token(LBRAC);
      colT = jj_consume_token(STRING);
                 col=colT.image;
                 rel=new ExprTree.VarLeaf(null, col);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
        case MULTIPLY:
        case DIVIDE:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_8;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          operatorT = jj_consume_token(PLUS);
          break;
        case MINUS:
          operatorT = jj_consume_token(MINUS);
          break;
        case MULTIPLY:
          operatorT = jj_consume_token(MULTIPLY);
          break;
        case DIVIDE:
          operatorT = jj_consume_token(DIVIDE);
          break;
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        colT = jj_consume_token(STRING);
                    col=colT.image;
                    loperand=rel;
                    roperand=new ExprTree.VarLeaf(null,col);
                    if(operatorT.image.equals("+"))
                        rel=new ExprTree(ExprTree.OpCode.ADD,loperand ,roperand);
                    else if(operatorT.image.equals("-"))
                        rel=new ExprTree(ExprTree.OpCode.SUB,loperand ,roperand);
                    else if(operatorT.image.equals("*"))
                        rel=new ExprTree(ExprTree.OpCode.MULT,loperand ,roperand);
                    else if(operatorT.image.equals("/"))
                        rel=new ExprTree(ExprTree.OpCode.DIV,loperand ,roperand);
      }
      jj_consume_token(RBRAC);
              if(aggFun.equalsIgnoreCase("sum"))
                query_0.addAggregate(new AggregateNode.AggColumn(colName,rel,AggregateNode.AType.SUM));
              else if(aggFun.equalsIgnoreCase("avg"))
                query_0.addAggregate(new AggregateNode.AggColumn(colName,rel,AggregateNode.AType.AVG));
              else if(aggFun.equalsIgnoreCase("min"))
                query_0.addAggregate(new AggregateNode.AggColumn(colName,rel,AggregateNode.AType.MIN));
              else if(aggFun.equalsIgnoreCase("max"))
                query_0.addAggregate(new AggregateNode.AggColumn(colName,rel,AggregateNode.AType.MAX));
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_9;
        }
        jj_consume_token(COMMA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SUM:
          aggT = jj_consume_token(SUM);
          break;
        case AVG:
          aggT = jj_consume_token(AVG);
          break;
        case MIN:
          aggT = jj_consume_token(MIN);
          break;
        case MAX:
          aggT = jj_consume_token(MAX);
          break;
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              aggFun=aggT.image;
              if(aggFun.equalsIgnoreCase("sum"))
                colName="Sum";
              else if(aggFun.equalsIgnoreCase("avg"))
                colName="Average";
              else if(aggFun.equalsIgnoreCase("min"))
                colName="Min";
              else
                colName="Max";
        jj_consume_token(LBRAC);
        colT = jj_consume_token(STRING);
                 col=colT.image;
                 rel=new ExprTree.VarLeaf(null, col);
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PLUS:
          case MINUS:
          case MULTIPLY:
          case DIVIDE:
            ;
            break;
          default:
            jj_la1[28] = jj_gen;
            break label_10;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PLUS:
            operatorT = jj_consume_token(PLUS);
            break;
          case MINUS:
            operatorT = jj_consume_token(MINUS);
            break;
          case MULTIPLY:
            operatorT = jj_consume_token(MULTIPLY);
            break;
          case DIVIDE:
            operatorT = jj_consume_token(DIVIDE);
            break;
          default:
            jj_la1[29] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          colT = jj_consume_token(STRING);
                    col=colT.image;
                    loperand=rel;
                    roperand=new ExprTree.VarLeaf(null,col);
                    if(operatorT.image.equals("+"))
                        rel=new ExprTree(ExprTree.OpCode.ADD,loperand ,roperand);
                    else if(operatorT.image.equals("-"))
                        rel=new ExprTree(ExprTree.OpCode.SUB,loperand ,roperand);
                    else if(operatorT.image.equals("*"))
                        rel=new ExprTree(ExprTree.OpCode.MULT,loperand ,roperand);
                    else if(operatorT.image.equals("/"))
                        rel=new ExprTree(ExprTree.OpCode.DIV,loperand ,roperand);
        }
        jj_consume_token(RBRAC);
              if(aggFun.equalsIgnoreCase("sum"))
                query_0.addAggregate(new AggregateNode.AggColumn(colName,rel,AggregateNode.AType.SUM));
              else if(aggFun.equalsIgnoreCase("avg"))
                query_0.addAggregate(new AggregateNode.AggColumn(colName,rel,AggregateNode.AType.AVG));
              else if(aggFun.equalsIgnoreCase("min"))
                query_0.addAggregate(new AggregateNode.AggColumn(colName,rel,AggregateNode.AType.MIN));
              else if(aggFun.equalsIgnoreCase("max"))
                query_0.addAggregate(new AggregateNode.AggColumn(colName,rel,AggregateNode.AType.MAX));
      }
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
            {if (true) return query_0;}
    throw new Error("Missing return statement in function");
  }

  static final public ExprTree constCondition() throws ParseException {
                ExprTree query0=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRAC:
    case EXPONENTIAL:
    case INTNUMBER:
    case FLOATNUMBER:
      query0 = constExpression();
      break;
    case TRUE:
    case FALSE:
    case NOT:
      query0 = booleanExpression();
      break;
    case SINGLEQUOTE:
      query0 = stringExpr();
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        {if (true) return query0;}
    throw new Error("Missing return statement in function");
  }

  static final public ExprTree stringExpr() throws ParseException {
          ExprTree ret=null;
          String temp=new String();
          Token t;
    jj_consume_token(SINGLEQUOTE);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIVIDE:
      case CHARACTER:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIVIDE:
        t = jj_consume_token(DIVIDE);
        t = jj_consume_token(CHARACTER);
        break;
      case CHARACTER:
        t = jj_consume_token(CHARACTER);
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                temp=temp+t.image;
    }
    jj_consume_token(SINGLEQUOTE);
          ret=new ExprTree.ConstLeaf(temp);
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  static final public ExprTree booleanExpression() throws ParseException {
          ExprTree ret=null;
          Token t;
          Token operator;
          ExprTree loperand=null;
          ExprTree roperand=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
        t = jj_consume_token(TRUE);
        break;
      case FALSE:
        t = jj_consume_token(FALSE);
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                if(t.image.equalsIgnoreCase("true"))
                        ret=new ExprTree.ConstLeaf(true);
                else
                        ret=new ExprTree.ConstLeaf(false);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          operator = jj_consume_token(AND);
          break;
        case OR:
          operator = jj_consume_token(OR);
          break;
        default:
          jj_la1[35] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRUE:
          t = jj_consume_token(TRUE);
          break;
        case FALSE:
          t = jj_consume_token(FALSE);
          break;
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                   loperand=ret;
                   if(t.image.equalsIgnoreCase("true"))
                        roperand=new ExprTree.ConstLeaf(true);
                   else
                        roperand=new ExprTree.ConstLeaf(false);

                   if(operator.image.equalsIgnoreCase("and"))
                                ret=new ExprTree(ExprTree.OpCode.AND,loperand,roperand);
                   else
                                ret=new ExprTree(ExprTree.OpCode.OR,loperand,roperand);
        break;
      default:
        jj_la1[37] = jj_gen;
        ;
      }
      break;
    case NOT:
      jj_consume_token(NOT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
        t = jj_consume_token(TRUE);
        break;
      case FALSE:
        t = jj_consume_token(FALSE);
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
              if(t.image.equalsIgnoreCase("true"))
                ret=new ExprTree(ExprTree.OpCode.NOT, new ExprTree.ConstLeaf(true));
              else
                ret=new ExprTree(ExprTree.OpCode.NOT, new ExprTree.ConstLeaf(false));
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
            {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  static final public ExprTree constExpression() throws ParseException {
                ExprTree ret=null;
                Token t;
                String strVal=new String();
                ExprTree loperand=null;
                ExprTree roperand=null;
    ret = term();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[40] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      roperand = term();
                  loperand=ret;
                  if(t.image.equals("+"))
                        ret=new ExprTree(ExprTree.OpCode.ADD, loperand, roperand);
                  else
                        ret=new ExprTree(ExprTree.OpCode.SUB, loperand, roperand);
    }
            {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  static final public ExprTree term() throws ParseException {
                ExprTree ret=null;
                Token t;
                String strVal=new String();
                ExprTree loperand=null;
                ExprTree roperand=null;
    ret = element();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
      case DIVIDE:
        ;
        break;
      default:
        jj_la1[42] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
        t = jj_consume_token(MULTIPLY);
        break;
      case DIVIDE:
        t = jj_consume_token(DIVIDE);
        break;
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      roperand = element();
                  loperand=ret;
                  if(t.image.equals("*"))
                        ret=new ExprTree(ExprTree.OpCode.MULT, loperand, roperand);
                  else
                        ret=new ExprTree(ExprTree.OpCode.DIV, loperand, roperand);
    }
            {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  static final public ExprTree element() throws ParseException {
          ExprTree ret=null;
          String strVal=new String();
          Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXPONENTIAL:
    case INTNUMBER:
    case FLOATNUMBER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTNUMBER:
        t = jj_consume_token(INTNUMBER);
                                        strVal=t.image;
                                        ret=new ExprTree.ConstLeaf(Integer.parseInt(strVal));
        break;
      case FLOATNUMBER:
        t = jj_consume_token(FLOATNUMBER);
                                        strVal=t.image;
                                        ret=new ExprTree.ConstLeaf(Float.parseFloat(strVal));
        break;
      case EXPONENTIAL:
        t = jj_consume_token(EXPONENTIAL);
                                        strVal=t.image;
                                        ret=new ExprTree.ConstLeaf(Float.parseFloat(strVal));
        break;
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case LBRAC:
      jj_consume_token(LBRAC);
      ret = constExpression();
      jj_consume_token(RBRAC);
      break;
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
            {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  static final public void create() throws ParseException {
                String tableName=new String();
                String fileName=new String();
                Map<String,String > cols=new LinkedHashMap<String,String >();
                Token t;
    jj_consume_token(CREATE_TABLE);
    t = jj_consume_token(STRING);
                        tableName=t.image;
    cols = columns();
    jj_consume_token(FROM_FILE);
    t = jj_consume_token(PATH);
                        fileName=t.image.substring(1,t.image.length()-1);
    jj_consume_token(USING_CSV);
    jj_consume_token(SEMICOLON);
                        Schema.TableFromFile table=new Schema.TableFromFile(new File(fileName));
                        for(String key:cols.keySet())
                        {
                                if(cols.get(key).equalsIgnoreCase("int"))
                                {
                                        table.add(new Schema.Column(tableName, key, Schema.Type.INT));
                                }
                                else if(cols.get(key).equalsIgnoreCase("float"))
                                {
                                        table.add(new Schema.Column(tableName, key, Schema.Type.FLOAT));
                                }
                                else if(cols.get(key).equalsIgnoreCase("string"))
                                {
                                        table.add(new Schema.Column(tableName, key, Schema.Type.STRING));
                                }
                        }
                        allTables.put(tableName,table);
  }

  static final public Map<String,String > columns() throws ParseException {
                Map<String,String > cols=new LinkedHashMap<String,String >();
                String colName=new String();
                String colType=new String();
                Token t;
    jj_consume_token(LBRAC);
    t = jj_consume_token(STRING);
                                        colName=t.image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTDT:
      t = jj_consume_token(INTDT);
      break;
    case FLOATDT:
      t = jj_consume_token(FLOATDT);
      break;
    case STRINGDT:
      t = jj_consume_token(STRINGDT);
      break;
    default:
      jj_la1[46] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                        colType= t.image;
                                        cols.put(colName,colType);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[47] = jj_gen;
        break label_14;
      }
      jj_consume_token(COMMA);
      t = jj_consume_token(STRING);
                                                        colName=t.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTDT:
        t = jj_consume_token(INTDT);
        break;
      case FLOATDT:
        t = jj_consume_token(FLOATDT);
        break;
      case STRINGDT:
        t = jj_consume_token(STRINGDT);
        break;
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                        colType= t.image;
                                                        cols.put(colName,colType);
    }
    jj_consume_token(RBRAC);
                        {if (true) return cols;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[49];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10100,0x10100,0x0,0x80,0x0,0x0,0x0,0xc00e0800,0x0,0x0,0x80,0x0,0x0,0x0,0xc00e0800,0x0,0x80,0x0,0x0,0x0,0x3f000000,0x800,0x80,0x0,0xf00000,0xf00000,0x80,0x0,0xf00000,0xf00000,0x0,0xc00e0800,0x800000,0x800000,0xc0000000,0x0,0xc0000000,0x0,0xc0000000,0xc0000000,0x300000,0x300000,0xc00000,0xc00000,0xe0000,0xe0800,0xe000,0x80,0xe000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x40,0x0,0x40,0x9780,0x10,0xb784,0x800,0x40,0x0,0x40,0x9780,0x10,0xb784,0x20000,0x0,0x20000,0x3,0x3,0x0,0x8000,0x0,0x780,0x0,0x0,0x0,0x780,0x0,0x0,0x1780,0x2004,0x10000,0x10000,0x0,0x3,0x0,0x3,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 49; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 49; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 49; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 49; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 49; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 49; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[50];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 49; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 50; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
